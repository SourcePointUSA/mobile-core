import org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeSimulatorTest
import java.io.ByteArrayOutputStream

plugins {
    kotlin("multiplatform") version "1.9.25"
    kotlin("native.cocoapods") version "1.9.25"
    kotlin("plugin.serialization") version "1.9.25"
    id("com.github.ben-manes.versions") version "0.50.0"
    id("com.android.library") version "8.3.2"
    id("com.github.gmazzo.buildconfig") version "5.3.5"
}

val coreVersion = "0.0.1"

val generatedSourcesPath = layout.buildDirectory.dir("generated").get()
val sourceDir = "${layout.projectDirectory}/cocoapods/publish/debug"
val destDir = "${layout.projectDirectory}/cocoapods/pod"
val gitRepoUrl = "https://github.com/SourcepointUSA/SPMobileCore.git"
val podVersion = kotlin.cocoapods.version
val deviceName = project.findProperty("iosDevice") as? String ?: "iPhone 15"
// this generates a kotlin file with constants that can be used inside the project
buildConfig {
    buildConfigField("Version", coreVersion)
}

@OptIn(org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi::class)
kotlin {
    applyDefaultHierarchyTemplate()

    androidTarget {
        compilations.all {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }
    iosX64()
    iosArm64()
    iosSimulatorArm64()
    tvosX64()
    tvosArm64()
    tvosSimulatorArm64()

    cocoapods {
        name = "SPMobileCore"
        summary = "A prototype of a iOS pod generated by Kotlin Multiplatform"
        homepage = "https://github.com/SourcepointUSA/SPMobileCore"
        license = "{ :type => 'MIT', :file => 'LICENSE' }"
        source = "{ :git => 'https://github.com/SourcepointUSA/SPMobileCore.git', :tag => '$coreVersion' }"
        authors = "Andr√© Herculano"
        version = coreVersion
        ios.deploymentTarget = "11.0"
        framework {
            binaryOptions["bundleId"] = "com.sourcepoint.SPMobileCore"
            baseName = "SPMobileCore"
            transitiveExport = true
        }
    }

    sourceSets {
        val ktorVersion = "2.3.12"
        val coroutinesVersion = "1.8.1"
        val settingsVersion = "1.1.1"
        val dataTimeVersion = "0.6.0"
        val logbackVersion = "1.5.6"
        val commonMain by getting {
            dependencies {
                implementation("com.russhwolf:multiplatform-settings-no-arg:$settingsVersion")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
                implementation("org.jetbrains.kotlinx:kotlinx-datetime:$dataTimeVersion")
                implementation("io.ktor:ktor-client-core:$ktorVersion")
                implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
                implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")
                implementation("io.ktor:ktor-client-logging:$ktorVersion")
//                implementation("ch.qos.logback:logback-classic:$logbackVersion")
            }
        }
        commonMain.kotlin.srcDir("$generatedSourcesPath/src/main/kotlin")
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test"))
                implementation("com.russhwolf:multiplatform-settings-test:$settingsVersion")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion")
            }
        }
        val androidMain by getting {
            dependencies {
                implementation("io.ktor:ktor-client-okhttp:$ktorVersion")
            }
        }
        val appleMain by getting {
            dependencies {
                implementation("io.ktor:ktor-client-darwin:$ktorVersion")
            }
        }
    }
}

android {
    namespace = "com.sourcepoint.mobile_core"
    compileSdk = 34
    defaultConfig {
        minSdk = 22
    }
    packaging {
        resources.excludes += "DebugProbesKt.bin"
    }
}

tasks.register("podCloneOrPullGitRepo") {
    doLast {
        val dir = file(destDir)

        if (!dir.exists()) {
            dir.mkdirs()
            project.exec {
                workingDir = dir
                commandLine("git", "clone", gitRepoUrl, ".")
            }
        } else {
            project.exec {
                workingDir = dir
                commandLine("git", "pull")
            }
        }
    }
}

tasks.register<Copy>("podCopyDir") {
    from(sourceDir)
    into(destDir)
    dependsOn("podPublishDebugXCFramework", "podCloneOrPullGitRepo")
}

tasks.register<Exec>("podReleaseToGit") {
    workingDir = file(destDir)
    println(workingDir.path)
    println(file(".").path)
    commandLine("git", "status")
    commandLine("git", "add", ".")
    commandLine("git", "status")
    commandLine("git", "commit", "-m", "release $podVersion")
    commandLine("git", "tag", "-a", podVersion, "-m", podVersion)
    commandLine("git", "push", "--tags")
    dependsOn("podCopyDir")
}

tasks.register<Exec>("podReleaseToCocoapods") {
    workingDir = file(destDir)
    commandLine("pod", "trunk", "push", "${kotlin.cocoapods.name}.podspec", "--verbose", "--allow-warnings")
    dependsOn("podReleaseToGit")
}

tasks.register("podRelease") {
    dependsOn("podPublishDebugXCFramework", "podCloneOrPullGitRepo", "podCopyDir", "podReleaseToGit")
}

// FIXME: this does not work for tvOS
tasks.register<Exec>("bootIOSSimulator") {
    isIgnoreExitValue = true
    val errorBuffer = ByteArrayOutputStream()
    errorOutput = ByteArrayOutputStream()
    commandLine("xcrun", "simctl", "boot", deviceName)

    doLast {
        val result = executionResult.get()
        if (result.exitValue != 148 && result.exitValue != 149) { // ignoring device already booted errors
            println(errorBuffer.toString())
            result.assertNormalExitValue()
        }
    }
}

tasks.withType<KotlinNativeSimulatorTest>().configureEach {
    dependsOn("bootIOSSimulator")
    standalone.set(false)
    device.set(deviceName)
}
